
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
import time
import subprocess
import concurrent.futures
# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import obd
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive

gauth =  GoogleAuth()
drive = GoogleDrive(gauth)

file_loc={'license':'1vpKvhCZsmsgAv_9PwePx8ZDgkBXojqsv','polution':'1_T9T_A8bmjA9MszY71n9joGI1nOsO0j2','insurance':'1Vzny4w_a8lSAopL9JCgvjkN0u2qS9wki','rc':'1_p8mdljCaGe_s7L7W_DtShaU3E7F5oWl'}

def verify(name):
    folder=file_loc[name]
    if drive.ListFile({'q':f"'{folder}' in parents and trashed=false"}).GetList()==[]:
        return 0
    else:
        return 1

port = "COM20"


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\User\Desktop\New folder\build\assets\frame2")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)
def openwindow2():
    window.destroy()
    path_to_script ="C:/Users/User/Desktop/New folder/build/gui1.py"
    subprocess.run(["python", path_to_script])
    

def openwindow():
    window.destroy()
    path_to_script ="C:/Users/User/Desktop/New folder/build/gui1.py"
    subprocess.run(["python", path_to_script])
    

window = Tk()

window.geometry("1024x600")
window.configure(bg = "#FFFFFF")


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 600,
    width = 1024,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    512.0,
    300.0,
    image=image_image_1
)

text_item=canvas.create_text(
    273.0,
    109.0,
    anchor="nw",
    text="connecting to obd.....",
    fill="#FFFFFF",
    tag='text',
    font=("Inter", 32 * -1)
)


image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    512.0,
    65.0,
    image=image_image_2
)

canvas.create_rectangle(
    150.0,
    158.0,
    874.0,
    500.0,
    fill="#2D2A2A",
    outline="")

canvas.create_text(
    235.0,
    213.0,
    anchor="nw",
    text="\"Drive like you stole it, and you might actually end up stealing a one-way ticket to the \nhospital.\"\n\n\"The only thing more dangerous than a driver who's had a few drinks is a driver who \nthinks they can handle a few drinks.\"\n\n\"Better to be late than to meet your fate, so buckle up and don't tempt fate!\"\n\n\"Honking your horn won't make traffic move faster, but it will make you look like a \ngoose!\"\n\n\"Driving too close to the car in front of you is like trying to make friends with a \nporcupine - it might seem like a good idea at first, but it's gonna end in disaster!\"",
    fill="#ffffff",
    font=("Inter", 14 * -1)
)
button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: openwindow2(),
    relief="flat"
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    relief="flat"
)
button_2.place(
    x=449.0,
    y=517.0,
    width=126.0,
    height=53.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: openwindow(),
    relief="flat"
)



connection = obd.OBD(port)

flag = 0
canvas.pack()



def obdconnection():
    global flag,text_item
    if bool(connection.is_connected())==True:
        canvas.itemconfig(text_item,text='OBD connected')
        flag=1
        window.after(2000,obcheck)  
    else:
        button_2.destroy()
        canvas.itemconfig(text_item, text='not connected')
        button_1.place(
        x=449.0,
        y=517.0,
        width=126.0,
        height=53.0
        )
        
        flag =2
def doccheck():
    global text_item
    time.sleep(3)
    canvas.itemconfig(text_item,text='Checking for doc')
    window.after(9000,docver)

def obcheck():
    time.sleep(3)
    canvas.itemconfig(text_item, text='Checking vehicle condition')
    window.after(5000,obd_check)
        
def docver():
    time.sleep(4)
    s=[]
    s.append(verify('polution'))
    s.append(verify('rc'))
    s.append(verify('insurance'))
    if s==[1, 1, 1]:
        canvas.itemconfig(text_item,text='Documents have been verified')
        button_2.destroy()
        time.sleep(2)
        button_3.place(
            x=449.0,
            y=517.0,
            width=126.0,
            height=53.0)

def throttle_pos():
    cmd = obd.commands.THROTTLE_POS
    response = connection.query(cmd)
    text1=str(response.value)
    text=float(text1.strip(" percent"))
    text=int(text)
    if text<30:
        return 1
    else:
        return 0
def barro_press():
    cmd = obd.commands.BAROMETRIC_PRESSURE
    response = connection.query(cmd)
    text1=str(response.value)
    text=int(text1.strip(" kilopascal"))
    if text<200:
        return 1
    else:
        return 0
    


def coolant_temp():
    cmd = obd.commands.COOLANT_TEMP
    response = connection.query(cmd)
    text1=str(response.value)
    text=(int(text1.strip(" degC")))
    if text<50:
        return 1
    else:
        return 0

def amp_air_temp():
    cmd = obd.commands.AMBIANT_AIR_TEMP
    response = connection.query(cmd)
    text1=str(response.value)
    text=int(text1.strip(" degC"))
    if text<50:
        return 1
    else: 
        return 0
def obd_check():
    time.sleep(3)
    d=[]
    d.append(throttle_pos())
    d.append(amp_air_temp())
    d.append(coolant_temp())
    d.append(barro_press())
    canvas.itemconfig(text_item, text='Vehicle status OK')
    window.after(6000,doccheck)




window.after(5000,obdconnection)


window.attributes("-fullscreen", True)

window.mainloop()




# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import obd

port = "COM20"
connection = obd.OBD(bluetooth_addr='AA:BB:CC:11:22:33')


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"/home/pi/Desktop/Cardigo3/build/assets/frame3")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def openmenu():
    window3.destroy()
window3 = Tk()
window3.geometry("1024x600")
window3.configure(bg = "#135390")



canvas = Canvas(
    window3,
    bg = "#135390",
    height = 600,
    width = 1024,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    537.0,
    71.0,
    image=image_image_1
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    298.0,
    64.0,
    image=image_image_2
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: dctspeed(),
    relief="flat"
)
button_1.place(
    x=20.0,
    y=228.0,
    width=300.0,
    height=75.0
)


button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: dctrpm(),
    relief="flat"
)
button_2.place(
    x=20.0,
    y=323.0,
    width=300.0,
    height=75.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: dctcoolant_temp(),
    relief="flat"
)
button_3.place(
    x=20.0,
    y=418.0,
    width=300.0,
    height=75.0
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: dcto2level(),
    relief="flat"
)
button_4.place(
    x=20.0,
    y=513.0,
    width=300.0,
    height=75.0
)
button_image_5 = PhotoImage(
    file=relative_to_assets("button_5.png"))
button_5 = Button(
    image=button_image_5,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: dctruntime(),
    relief="flat"
)
button_5.place(
    x=523.0,
    y=228.0,
    width=300.0,
    height=75.0
)

button_image_6 = PhotoImage(
    file=relative_to_assets("button_6.png"))
button_6 = Button(
    image=button_image_6,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: dctfuel_level(),
    relief="flat"
)
button_6.place(
    x=523.0,
    y=323.0,
    width=300.0,
    height=75.0
)

button_image_7 = PhotoImage(
    file=relative_to_assets("button_7.png"))
button_7 = Button(
    image=button_image_7,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: dctair_temp(),
    relief="flat"
)
button_7.place(
    x=521.0,
    y=418.0,
    width=300.0,
    height=75.0
)

button_image_8 = PhotoImage(
    file=relative_to_assets("button_8.png"))
button_8 = Button(
    image=button_image_8,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: dctoil_temp(),
    relief="flat"
)
button_8.place(
    x=523.0,
    y=513.0,
    width=300.0,
    height=75.0
)
def dctspeed():
    canvas.delete('speed')
    cmd = obd.commands.SPEED # select an OBD command (sensor)
    response = connection.query(cmd) # send the command, and parse the response
    text1= response.value.to("mph") # user-friendly unit conversions
    canvas.create_text(
        330.0,
        251.0,
        anchor="nw",
        text=text1,
        fill="#FFFFFF",
        tag='speed',
        font=("Inter SemiBold", 32 * -1)
    )

def dctruntime():
    canvas.delete('rtime')
    cmd = obd.commands.RUN_TIME # select an OBD command (sensor)
    response = connection.query(cmd)
    text1=response.value
    canvas.create_text(
        829.0,
        247.0,
        anchor="nw",
        text=text1,
        tag='rtime',
        fill="#FFFFFF",
        font=("Inter SemiBold", 24 * -1)
    )

def dctfuel_level():
    canvas.delete('fuel')
    cmd = obd.commands.FUEL_LEVEL # select an OBD command (sensor)
    response = connection.query(cmd)
    text1=response.value
    canvas.create_text(
        829.0,
        341.0,
        anchor="nw",
        text=text1,
        tag='fuel',
        fill="#FFFFFF",
        font=("Inter SemiBold", 32 * -1)
)
def dctair_temp():
    canvas.delete('air')
    cmd = obd.commands.AMBIANT_AIR_TEMP # select an OBD command (sensor)
    response = connection.query(cmd)
    text1=response.value
    canvas.create_text(
        829.0,
        439.0,
        anchor="nw",
        text=text1,
        tag='air',
        fill="#FFFFFF",
        font=("Inter SemiBold", 32 * -1)
    )
def dctoil_temp():
    canvas.delete('oil')
    cmd = obd.commands.OIL_TEMP # select an OBD command (sensor)
    response = connection.query(cmd)
    text1=response.value

    canvas.create_text(
        829.0,
        529.0,
        anchor="nw",
        text=text1,
        tag='oil',
        fill="#FFFFFF",
        font=("Inter SemiBold", 32 * -1)
    )
def dctrpm():
    canvas.delete('rpm')
    cmd = obd.commands.RPM # select an OBD command (sensor)
    response = connection.query(cmd)
    text1=response.value
    canvas.create_text(
        330.0,
        344.0,
        anchor="nw",
        text=text1,
        tag='rpm',
        fill="#FFFFFF",
        font=("Inter SemiBold", 32 * -1)
    )
def dctcoolant_temp():
    canvas.delete('cool')
    cmd = obd.commands.COOLANT_TEMP # select an OBD command (sensor)
    response = connection.query(cmd)
    text1=response.value
    canvas.create_text(
        330.0,
        439.0,
        anchor="nw",
        text=text1,
        tag='cool',
        fill="#FFFFFF",
        font=("Inter SemiBold", 32 * -1)
    )

def dcto2level():
    canvas.delete('o2')
    cmd = obd.commands.GET_DTC # select an OBD command (sensor)
    response = connection.query(cmd)
    text1=response.value
    canvas.create_text(
        330.0,
        531.0,
        anchor="nw",
        text=text1,
        tag="o2",
        fill="#FFFFFF",
        font=("Inter SemiBold", 32 * -1)
    )
    


canvas.create_text(
    457.0,
    143.0,
    anchor="nw",
    text="Connection Status:",
    fill="#FFFFFF",
    font=("Inter", 32 * -1)
)
abc=canvas.create_text(
    772.0,
    143.0,
    anchor="nw",
    text="",
    fill="#FFFFFF",
    font=("Inter", 32 * -1))

button_image_9 = PhotoImage(
    file=relative_to_assets("button_9.png"))
button_9 = Button(
    image=button_image_9,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: openmenu(),
    relief="flat"
)
button_9.place(
    x=18.0,
    y=24.0,
    width=45.0,
    height=41.0
)
def connectionstat():
    if bool(connection.is_connected())==True:
        canvas.itemconfig(abc, text='Connected')
    else:
        canvas.itemconfig(abc, text='Not Connected')
window3.attributes("-fullscreen", True)
window3.mainloop()
